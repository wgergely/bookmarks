@echo off
@echo off
@REM -----------------------------------------------------------
@REM This script builds PySide from source on a Windows system.
@REM It performs the following steps:
@REM 1. Copies Python files from VCPKG_PYTHON_DIR to PYTHON_DIR.
@REM 2. Clones the PySide repository from code.qt.io, checks out the required version and updates submodules.
@REM 3. Installs necessary Python dependencies from a requirements.txt file and installs numpy 1.22.4.
@REM 4. Sets up the build environment and path variables.
@REM 5. Runs a CMake configuration for building PySide with specified options.
@REM 6. Checks if the solution file exists in the build directory.
@REM 7. If the solution file exists, runs the build process with msbuild.exe.
@REM 
@REM Please ensure all necessary tools (Python, Git, CMake, etc.) are installed and that all necessary 
@REM environment variables (PYTHON_DIR, VCPKG_PYTHON_DIR, PACKAGES_DIR, etc.) are properly set before running.
@REM -----------------------------------------------------------


@REM Copy the vcpkg python parts into a new folder ao wqe can build against it
robocopy "${VCPKG_PYTHON_DIR}" "${PYTHON_DIR}" *.* /e /R:0 /W:0 /NFL /NDL /NJH /NJS /nc /ns /np
mkdir "${PYTHON_DIR}/include"
robocopy "${VCPKG_PYTHON_INCLUDE_DIR}" "${PYTHON_DIR}/include" *.* /e /R:0 /W:0 /NFL /NDL /NJH /NJS /nc /ns /np
mkdir "${PYTHON_DIR}/libs"
robocopy "${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/lib" "${PYTHON_DIR}/libs" python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}.lib /IS /IT /NFL /NDL /NJH /NJS /R:0 /W:0
robocopy "${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/debug/lib" "${PYTHON_DIR}/libs" python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_d.lib /IS /IT /NFL /NDL /NJH /NJS /R:0 /W:0

@REM Clone qt-for-python
cd /d "${PACKAGES_DIR}"
if EXIST "${PACKAGES_DIR}/pyside-setup" rmdir "${PACKAGES_DIR}/pyside-setup" /S /Q
git clone git://code.qt.io/pyside/pyside-setup.git "${PACKAGES_DIR}/pyside-setup"
cd pyside-setup
git checkout ${QT_VERSION_MAJOR}.${QT_VERSION_MINOR}.${QT_VERSION_PATCH}
git submodule update --init
git submodule foreach git fetch --all

@REM Install python dependencies
"${PYTHON_DIR}/python.exe" -m ensurepip
"${PYTHON_DIR}/python.exe" -m pip install --upgrade pip
"${PYTHON_DIR}/python.exe" -m pip install -r requirements.txt
"${PYTHON_DIR}/python.exe" -m pip install numpy==1.22.4

@REM Set the build environment up
set "LLVM_INSTALL_DIR=${LLVM_INSTALL_DIR}"
set "Qt${QT_VERSION_MAJOR}_DIR=${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}"
set "Qt${QT_VERSION_MAJOR}Core_DIR=${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}Core"
set "Qt${QT_VERSION_MAJOR}Gui_DIR=${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}Gui"
set "Qt${QT_VERSION_MAJOR}Widgets_DIR=${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}Widgets"

set "LLVM_INSTALL_DIR=${LLVM_INSTALL_DIR}"
set PATH=^
${PYTHON_DIR};^
${PYTHON_DIR}/Scripts;^
${LLVM_INSTALL_DIR};^
${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/tools/qt${QT_VERSION_MAJOR}/bin;^
${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/bin;^
%PATH%

@REM Build using cmake
"${CMAKE_COMMAND}" ^
-S "${PACKAGES_DIR}/pyside-setup" ^
-B "${PACKAGES_DIR}/pyside-setup/build" ^
-G "${CMAKE_GENERATOR}" ^
-A ${CMAKE_GENERATOR_PLATFORM} ^
-DCMAKE_BUILD_TYPE=Release ^
-DPYTHON_EXECUTABLE="${PYTHON_DIR}/python.exe" ^
-DCMAKE_INSTALL_PREFIX:PATH="${PACKAGES_DIR}/packages/pyside-setup/install" ^
-DBUILD_TESTS:BOOL=OFF ^
-DSKIP_MODULES=PrintSupport;Sql;Network;Test;Concurrent;Xml;XmlPatterns;Help;Multimedia;MultimediaWidgets;OpenGL;OpenGLFunctions;Positioning;Location;Qml;Quick;QuickControls2;QuickWidgets;RemoteObjects;Scxml;Script;ScriptTools;Sensors;SerialPort;TextToSpeech;Charts;Svg;DataVisualization ^
-DQt${QT_VERSION_MAJOR}_DIR:PATH="${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}" ^
-DQt${QT_VERSION_MAJOR}Core_DIR:PATH="${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}Core" ^
-DQt${QT_VERSION_MAJOR}Gui_DIR:PATH="${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}Gui" ^
-DQt${QT_VERSION_MAJOR}Widgets_DIR:PATH="${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}Widgets" ^
-DQt${QT_VERSION_MAJOR}Xml_DIR:PATH="${PACKAGES_DIR}/vcpkg/installed/${VCPKG_TRIPLET}/share/cmake/Qt${QT_VERSION_MAJOR}Xml" ^
-DPYTHON_LIBRARY_DEBUG:FILEPATH="${PYTHON_DIR}/libs/python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_d.lib" ^
-DPYTHON_LIBRARY_RELEASE:FILEPATH="${PYTHON_DIR}/libs/python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}.lib" ^
-DPYTHON_EXECUTABLE:FILEPATH="${PYTHON_DIR}/python.exe" ^
-DPYTHON_LIBRARY:FILEPATH="${PYTHON_DIR}/libs/python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}.lib" ^
-DPYTHON_DEBUG_LIBRARY:FILEPATH="${PYTHON_DIR}/libs/python${PYTHON_VERSION_MAJOR}${PYTHON_VERSION_MINOR}_d.lib" ^
-DQUIET_BUILD=1

@REM Build solution
set "SOLUTION=${PACKAGES_DIR}/pyside-setup/build/${PYSIDE_LOWER}_super_project.sln"
if not exist "%SOLUTION%" (
    echo Error: Could not find %SOLUTION%
    exit /b 1
)

@REM Build pyside
cd "${CMAKE_CURRENT_BINARY_DIR}/pyside-setup/build"
cmd /c msbuild.exe "%SOLUTION%" -target:Build -property:Configuration=Release -property:Platform=${CMAKE_GENERATOR_PLATFORM} /m /nologo