import os
import sys
import argparse

# Parse arguments
parser = argparse.ArgumentParser()
parser.add_argument('--module', help='The directory of the module to be tested.')

args = parser.parse_args()

print(f'# Test: Setting module to {args.module}')

sys.path.insert(0, args.module)
os.environ['PATH'] += ';' + args.module
if sys.version_info >= (3, 8):
    os.add_dll_directory(args.module)


import pyimageutil


OIIO_TEST_IMAGES_DIR = "@OIIO_TEST_IMAGES_EXTRACTED@"
OUTPUT_DIR = "@CMAKE_BINARY_DIR@/test/oiio-images-outputs"
SIZES_TO_TEST = [512, 256, -1]

os.makedirs(OUTPUT_DIR, exist_ok=True)

with open("@TEST_DIR@/images.txt", 'r', encoding='utf-8') as f:
    image_paths = f.read().splitlines()

def test_convert_image():
    for rel_image_path in image_paths:
        print(rel_image_path)
        rel_image_path = rel_image_path.strip()
        
        abs_image_path = os.path.normpath(os.path.join(OIIO_TEST_IMAGES_DIR, rel_image_path))
        print(f'# Test: Testing {abs_image_path}')

        if not os.path.isfile(abs_image_path):
            print(f'# Test: Image file "{abs_image_path}" does not exist, skipping.\n')
            continue

        image_name = os.path.splitext(os.path.basename(rel_image_path))[0]

        for size in SIZES_TO_TEST:
            full_output_path = os.path.join(OUTPUT_DIR, f"{image_name}_{size}.png")

            success = pyimageutil.convert_image(abs_image_path, full_output_path, size, True)
            
            if not success:
                print(f'# Test: Warning: Failed to convert image "{abs_image_path}"')
            if success and not os.path.isfile(full_output_path):
                print(f'# Test: Warning: Output image file does not exist: {full_output_path}')
            if success and os.path.isfile(full_output_path):
                print(f'# Test: Success:  converted {abs_image_path} to {full_output_path}')


def test_convert_images():
    full_image_paths = [os.path.join(OIIO_TEST_IMAGES_DIR, path) for path in image_paths]
    valid_image_paths = [path for path in full_image_paths if os.path.isfile(path)]
    output_image_paths = [os.path.join(OUTPUT_DIR, f"{os.path.splitext(os.path.basename(path))[0]}_{size}.png") for path in valid_image_paths for size in SIZES_TO_TEST]

    for size in SIZES_TO_TEST:
        success = pyimageutil.convert_images(valid_image_paths, output_image_paths, size, True)


if __name__ == '__main__':
    print('\nTesting convert_image()...\n')
    test_convert_image()
    
    print('\nTesting convert_images()...\n')
    test_convert_images()
    